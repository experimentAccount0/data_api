/*global define */
/*jslint white:true */
define(["thrift", "taxon_types"], function (Thrift, taxon) {
"use strict";
//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


//HELPER FUNCTIONS AND STRUCTURES

taxon.thrift_service_get_parent_args = function(args) {
  this.token = null;
  this.ref = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    }
    if (args.ref !== undefined) {
      this.ref = args.ref;
    }
  }
};
taxon.thrift_service_get_parent_args.prototype = {};
taxon.thrift_service_get_parent_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype === Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype === Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype === Thrift.Type.STRING) {
        this.ref = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

taxon.thrift_service_get_parent_args.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_parent_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.ref !== null && this.ref !== undefined) {
    output.writeFieldBegin('ref', Thrift.Type.STRING, 2);
    output.writeString(this.ref);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

taxon.thrift_service_get_parent_result = function(args) {
  this.success = null;
  this.failure = null;
  if (args instanceof taxon.ServiceException) {
    this.failure = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.failure !== undefined) {
      this.failure = args.failure;
    }
  }
};
taxon.thrift_service_get_parent_result.prototype = {};
taxon.thrift_service_get_parent_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype === Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype === Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype === Thrift.Type.STRUCT) {
        this.failure = new taxon.ServiceException();
        this.failure.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

taxon.thrift_service_get_parent_result.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_parent_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.failure !== null && this.failure !== undefined) {
    output.writeFieldBegin('failure', Thrift.Type.STRUCT, 1);
    this.failure.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

taxon.thrift_service_get_children_args = function(args) {
  this.token = null;
  this.ref = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    }
    if (args.ref !== undefined) {
      this.ref = args.ref;
    }
  }
};
taxon.thrift_service_get_children_args.prototype = {};
taxon.thrift_service_get_children_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype === Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype === Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype === Thrift.Type.STRING) {
        this.ref = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

taxon.thrift_service_get_children_args.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_children_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.ref !== null && this.ref !== undefined) {
    output.writeFieldBegin('ref', Thrift.Type.STRING, 2);
    output.writeString(this.ref);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

taxon.thrift_service_get_children_result = function(args) {
  this.success = null;
  this.failure = null;
  if (args instanceof taxon.ServiceException) {
    this.failure = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.failure !== undefined) {
      this.failure = args.failure;
    }
  }
};
taxon.thrift_service_get_children_result.prototype = {};
taxon.thrift_service_get_children_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype === Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype === Thrift.Type.LIST) {
        var _size10 = 0;
        var _rtmp314;
        this.success = [];
        var _etype13 = 0;
        _rtmp314 = input.readListBegin();
        _etype13 = _rtmp314.etype;
        _size10 = _rtmp314.size;
        for (var _i15 = 0; _i15 < _size10; ++_i15)
        {
          var elem16 = null;
          elem16 = input.readString().value;
          this.success.push(elem16);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype === Thrift.Type.STRUCT) {
        this.failure = new taxon.ServiceException();
        this.failure.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

taxon.thrift_service_get_children_result.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_children_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter17 in this.success)
    {
      if (this.success.hasOwnProperty(iter17))
      {
        iter17 = this.success[iter17];
        output.writeString(iter17);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.failure !== null && this.failure !== undefined) {
    output.writeFieldBegin('failure', Thrift.Type.STRUCT, 1);
    this.failure.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

taxon.thrift_service_get_genome_annotations_args = function(args) {
  this.token = null;
  this.ref = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    }
    if (args.ref !== undefined) {
      this.ref = args.ref;
    }
  }
};
taxon.thrift_service_get_genome_annotations_args.prototype = {};
taxon.thrift_service_get_genome_annotations_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype === Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype === Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype === Thrift.Type.STRING) {
        this.ref = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

taxon.thrift_service_get_genome_annotations_args.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_genome_annotations_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.ref !== null && this.ref !== undefined) {
    output.writeFieldBegin('ref', Thrift.Type.STRING, 2);
    output.writeString(this.ref);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

taxon.thrift_service_get_genome_annotations_result = function(args) {
  this.success = null;
  this.failure = null;
  if (args instanceof taxon.ServiceException) {
    this.failure = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.failure !== undefined) {
      this.failure = args.failure;
    }
  }
};
taxon.thrift_service_get_genome_annotations_result.prototype = {};
taxon.thrift_service_get_genome_annotations_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype === Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype === Thrift.Type.LIST) {
        var _size18 = 0;
        var _rtmp322;
        this.success = [];
        var _etype21 = 0;
        _rtmp322 = input.readListBegin();
        _etype21 = _rtmp322.etype;
        _size18 = _rtmp322.size;
        for (var _i23 = 0; _i23 < _size18; ++_i23)
        {
          var elem24 = null;
          elem24 = input.readString().value;
          this.success.push(elem24);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype === Thrift.Type.STRUCT) {
        this.failure = new taxon.ServiceException();
        this.failure.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

taxon.thrift_service_get_genome_annotations_result.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_genome_annotations_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter25 in this.success)
    {
      if (this.success.hasOwnProperty(iter25))
      {
        iter25 = this.success[iter25];
        output.writeString(iter25);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.failure !== null && this.failure !== undefined) {
    output.writeFieldBegin('failure', Thrift.Type.STRUCT, 1);
    this.failure.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

taxon.thrift_service_get_scientific_lineage_args = function(args) {
  this.token = null;
  this.ref = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    }
    if (args.ref !== undefined) {
      this.ref = args.ref;
    }
  }
};
taxon.thrift_service_get_scientific_lineage_args.prototype = {};
taxon.thrift_service_get_scientific_lineage_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype === Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype === Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype === Thrift.Type.STRING) {
        this.ref = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

taxon.thrift_service_get_scientific_lineage_args.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_scientific_lineage_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.ref !== null && this.ref !== undefined) {
    output.writeFieldBegin('ref', Thrift.Type.STRING, 2);
    output.writeString(this.ref);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

taxon.thrift_service_get_scientific_lineage_result = function(args) {
  this.success = null;
  this.failure = null;
  if (args instanceof taxon.ServiceException) {
    this.failure = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.failure !== undefined) {
      this.failure = args.failure;
    }
  }
};
taxon.thrift_service_get_scientific_lineage_result.prototype = {};
taxon.thrift_service_get_scientific_lineage_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype === Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype === Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype === Thrift.Type.STRUCT) {
        this.failure = new taxon.ServiceException();
        this.failure.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

taxon.thrift_service_get_scientific_lineage_result.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_scientific_lineage_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.failure !== null && this.failure !== undefined) {
    output.writeFieldBegin('failure', Thrift.Type.STRUCT, 1);
    this.failure.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

taxon.thrift_service_get_scientific_name_args = function(args) {
  this.token = null;
  this.ref = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    }
    if (args.ref !== undefined) {
      this.ref = args.ref;
    }
  }
};
taxon.thrift_service_get_scientific_name_args.prototype = {};
taxon.thrift_service_get_scientific_name_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype === Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype === Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype === Thrift.Type.STRING) {
        this.ref = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

taxon.thrift_service_get_scientific_name_args.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_scientific_name_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.ref !== null && this.ref !== undefined) {
    output.writeFieldBegin('ref', Thrift.Type.STRING, 2);
    output.writeString(this.ref);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

taxon.thrift_service_get_scientific_name_result = function(args) {
  this.success = null;
  this.failure = null;
  if (args instanceof taxon.ServiceException) {
    this.failure = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.failure !== undefined) {
      this.failure = args.failure;
    }
  }
};
taxon.thrift_service_get_scientific_name_result.prototype = {};
taxon.thrift_service_get_scientific_name_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype === Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype === Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype === Thrift.Type.STRUCT) {
        this.failure = new taxon.ServiceException();
        this.failure.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

taxon.thrift_service_get_scientific_name_result.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_scientific_name_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.failure !== null && this.failure !== undefined) {
    output.writeFieldBegin('failure', Thrift.Type.STRUCT, 1);
    this.failure.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

taxon.thrift_service_get_taxonomic_id_args = function(args) {
  this.token = null;
  this.ref = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    }
    if (args.ref !== undefined) {
      this.ref = args.ref;
    }
  }
};
taxon.thrift_service_get_taxonomic_id_args.prototype = {};
taxon.thrift_service_get_taxonomic_id_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype === Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype === Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype === Thrift.Type.STRING) {
        this.ref = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

taxon.thrift_service_get_taxonomic_id_args.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_taxonomic_id_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.ref !== null && this.ref !== undefined) {
    output.writeFieldBegin('ref', Thrift.Type.STRING, 2);
    output.writeString(this.ref);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

taxon.thrift_service_get_taxonomic_id_result = function(args) {
  this.success = null;
  this.failure = null;
  if (args instanceof taxon.ServiceException) {
    this.failure = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.failure !== undefined) {
      this.failure = args.failure;
    }
  }
};
taxon.thrift_service_get_taxonomic_id_result.prototype = {};
taxon.thrift_service_get_taxonomic_id_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype === Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype === Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype === Thrift.Type.STRUCT) {
        this.failure = new taxon.ServiceException();
        this.failure.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

taxon.thrift_service_get_taxonomic_id_result.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_taxonomic_id_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.failure !== null && this.failure !== undefined) {
    output.writeFieldBegin('failure', Thrift.Type.STRUCT, 1);
    this.failure.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

taxon.thrift_service_get_kingdom_args = function(args) {
  this.token = null;
  this.ref = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    }
    if (args.ref !== undefined) {
      this.ref = args.ref;
    }
  }
};
taxon.thrift_service_get_kingdom_args.prototype = {};
taxon.thrift_service_get_kingdom_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype === Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype === Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype === Thrift.Type.STRING) {
        this.ref = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

taxon.thrift_service_get_kingdom_args.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_kingdom_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.ref !== null && this.ref !== undefined) {
    output.writeFieldBegin('ref', Thrift.Type.STRING, 2);
    output.writeString(this.ref);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

taxon.thrift_service_get_kingdom_result = function(args) {
  this.success = null;
  this.failure = null;
  if (args instanceof taxon.ServiceException) {
    this.failure = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.failure !== undefined) {
      this.failure = args.failure;
    }
  }
};
taxon.thrift_service_get_kingdom_result.prototype = {};
taxon.thrift_service_get_kingdom_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype === Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype === Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype === Thrift.Type.STRUCT) {
        this.failure = new taxon.ServiceException();
        this.failure.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

taxon.thrift_service_get_kingdom_result.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_kingdom_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.failure !== null && this.failure !== undefined) {
    output.writeFieldBegin('failure', Thrift.Type.STRUCT, 1);
    this.failure.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

taxon.thrift_service_get_domain_args = function(args) {
  this.token = null;
  this.ref = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    }
    if (args.ref !== undefined) {
      this.ref = args.ref;
    }
  }
};
taxon.thrift_service_get_domain_args.prototype = {};
taxon.thrift_service_get_domain_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype === Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype === Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype === Thrift.Type.STRING) {
        this.ref = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

taxon.thrift_service_get_domain_args.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_domain_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.ref !== null && this.ref !== undefined) {
    output.writeFieldBegin('ref', Thrift.Type.STRING, 2);
    output.writeString(this.ref);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

taxon.thrift_service_get_domain_result = function(args) {
  this.success = null;
  this.failure = null;
  if (args instanceof taxon.ServiceException) {
    this.failure = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.failure !== undefined) {
      this.failure = args.failure;
    }
  }
};
taxon.thrift_service_get_domain_result.prototype = {};
taxon.thrift_service_get_domain_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype === Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype === Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype === Thrift.Type.STRUCT) {
        this.failure = new taxon.ServiceException();
        this.failure.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

taxon.thrift_service_get_domain_result.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_domain_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.failure !== null && this.failure !== undefined) {
    output.writeFieldBegin('failure', Thrift.Type.STRUCT, 1);
    this.failure.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

taxon.thrift_service_get_genetic_code_args = function(args) {
  this.token = null;
  this.ref = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    }
    if (args.ref !== undefined) {
      this.ref = args.ref;
    }
  }
};
taxon.thrift_service_get_genetic_code_args.prototype = {};
taxon.thrift_service_get_genetic_code_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype === Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype === Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype === Thrift.Type.STRING) {
        this.ref = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

taxon.thrift_service_get_genetic_code_args.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_genetic_code_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.ref !== null && this.ref !== undefined) {
    output.writeFieldBegin('ref', Thrift.Type.STRING, 2);
    output.writeString(this.ref);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

taxon.thrift_service_get_genetic_code_result = function(args) {
  this.success = null;
  this.failure = null;
  if (args instanceof taxon.ServiceException) {
    this.failure = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.failure !== undefined) {
      this.failure = args.failure;
    }
  }
};
taxon.thrift_service_get_genetic_code_result.prototype = {};
taxon.thrift_service_get_genetic_code_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype === Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype === Thrift.Type.BYTE) {
        this.success = input.readByte().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype === Thrift.Type.STRUCT) {
        this.failure = new taxon.ServiceException();
        this.failure.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

taxon.thrift_service_get_genetic_code_result.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_genetic_code_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BYTE, 0);
    output.writeByte(this.success);
    output.writeFieldEnd();
  }
  if (this.failure !== null && this.failure !== undefined) {
    output.writeFieldBegin('failure', Thrift.Type.STRUCT, 1);
    this.failure.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

taxon.thrift_service_get_aliases_args = function(args) {
  this.token = null;
  this.ref = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    }
    if (args.ref !== undefined) {
      this.ref = args.ref;
    }
  }
};
taxon.thrift_service_get_aliases_args.prototype = {};
taxon.thrift_service_get_aliases_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype === Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype === Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype === Thrift.Type.STRING) {
        this.ref = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

taxon.thrift_service_get_aliases_args.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_aliases_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.ref !== null && this.ref !== undefined) {
    output.writeFieldBegin('ref', Thrift.Type.STRING, 2);
    output.writeString(this.ref);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

taxon.thrift_service_get_aliases_result = function(args) {
  this.success = null;
  this.failure = null;
  if (args instanceof taxon.ServiceException) {
    this.failure = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.failure !== undefined) {
      this.failure = args.failure;
    }
  }
};
taxon.thrift_service_get_aliases_result.prototype = {};
taxon.thrift_service_get_aliases_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype === Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype === Thrift.Type.LIST) {
        var _size26 = 0;
        var _rtmp330;
        this.success = [];
        var _etype29 = 0;
        _rtmp330 = input.readListBegin();
        _etype29 = _rtmp330.etype;
        _size26 = _rtmp330.size;
        for (var _i31 = 0; _i31 < _size26; ++_i31)
        {
          var elem32 = null;
          elem32 = input.readString().value;
          this.success.push(elem32);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype === Thrift.Type.STRUCT) {
        this.failure = new taxon.ServiceException();
        this.failure.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

taxon.thrift_service_get_aliases_result.prototype.write = function(output) {
  output.writeStructBegin('thrift_service_get_aliases_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter33 in this.success)
    {
      if (this.success.hasOwnProperty(iter33))
      {
        iter33 = this.success[iter33];
        output.writeString(iter33);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.failure !== null && this.failure !== undefined) {
    output.writeFieldBegin('failure', Thrift.Type.STRUCT, 1);
    this.failure.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

taxon.thrift_serviceClient = function(input, output) {
    this.input = input;
    this.output = (!output) ? input : output;
    this.seqid = 0;
};
taxon.thrift_serviceClient.prototype = {};
taxon.thrift_serviceClient.prototype.get_parent = function(token, ref, callback) {
  if (callback === undefined) {
    this.send_get_parent(token, ref);
    return this.recv_get_parent();
  } else {
    var postData = this.send_get_parent(token, ref, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_get_parent);
  }
};

taxon.thrift_serviceClient.prototype.send_get_parent = function(token, ref, callback) {
  this.output.writeMessageBegin('get_parent', Thrift.MessageType.CALL, this.seqid);
  var args = new taxon.thrift_service_get_parent_args();
  args.token = token;
  args.ref = ref;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

taxon.thrift_serviceClient.prototype.recv_get_parent = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype === Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new taxon.thrift_service_get_parent_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.failure) {
    throw result.failure;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'get_parent failed: unknown result';
};
taxon.thrift_serviceClient.prototype.get_children = function(token, ref, callback) {
  if (callback === undefined) {
    this.send_get_children(token, ref);
    return this.recv_get_children();
  } else {
    var postData = this.send_get_children(token, ref, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_get_children);
  }
};

taxon.thrift_serviceClient.prototype.send_get_children = function(token, ref, callback) {
  this.output.writeMessageBegin('get_children', Thrift.MessageType.CALL, this.seqid);
  var args = new taxon.thrift_service_get_children_args();
  args.token = token;
  args.ref = ref;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

taxon.thrift_serviceClient.prototype.recv_get_children = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype === Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new taxon.thrift_service_get_children_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.failure) {
    throw result.failure;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'get_children failed: unknown result';
};
taxon.thrift_serviceClient.prototype.get_genome_annotations = function(token, ref, callback) {
  if (callback === undefined) {
    this.send_get_genome_annotations(token, ref);
    return this.recv_get_genome_annotations();
  } else {
    var postData = this.send_get_genome_annotations(token, ref, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_get_genome_annotations);
  }
};

taxon.thrift_serviceClient.prototype.send_get_genome_annotations = function(token, ref, callback) {
  this.output.writeMessageBegin('get_genome_annotations', Thrift.MessageType.CALL, this.seqid);
  var args = new taxon.thrift_service_get_genome_annotations_args();
  args.token = token;
  args.ref = ref;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

taxon.thrift_serviceClient.prototype.recv_get_genome_annotations = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype === Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new taxon.thrift_service_get_genome_annotations_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.failure) {
    throw result.failure;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'get_genome_annotations failed: unknown result';
};
taxon.thrift_serviceClient.prototype.get_scientific_lineage = function(token, ref, callback) {
  if (callback === undefined) {
    this.send_get_scientific_lineage(token, ref);
    return this.recv_get_scientific_lineage();
  } else {
    var postData = this.send_get_scientific_lineage(token, ref, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_get_scientific_lineage);
  }
};

taxon.thrift_serviceClient.prototype.send_get_scientific_lineage = function(token, ref, callback) {
  this.output.writeMessageBegin('get_scientific_lineage', Thrift.MessageType.CALL, this.seqid);
  var args = new taxon.thrift_service_get_scientific_lineage_args();
  args.token = token;
  args.ref = ref;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

taxon.thrift_serviceClient.prototype.recv_get_scientific_lineage = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype === Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new taxon.thrift_service_get_scientific_lineage_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.failure) {
    throw result.failure;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'get_scientific_lineage failed: unknown result';
};
taxon.thrift_serviceClient.prototype.get_scientific_name = function(token, ref, callback) {
  if (callback === undefined) {
    this.send_get_scientific_name(token, ref);
    return this.recv_get_scientific_name();
  } else {
    var postData = this.send_get_scientific_name(token, ref, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_get_scientific_name);
  }
};

taxon.thrift_serviceClient.prototype.send_get_scientific_name = function(token, ref, callback) {
  this.output.writeMessageBegin('get_scientific_name', Thrift.MessageType.CALL, this.seqid);
  var args = new taxon.thrift_service_get_scientific_name_args();
  args.token = token;
  args.ref = ref;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

taxon.thrift_serviceClient.prototype.recv_get_scientific_name = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype === Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new taxon.thrift_service_get_scientific_name_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.failure) {
    throw result.failure;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'get_scientific_name failed: unknown result';
};
taxon.thrift_serviceClient.prototype.get_taxonomic_id = function(token, ref, callback) {
  if (callback === undefined) {
    this.send_get_taxonomic_id(token, ref);
    return this.recv_get_taxonomic_id();
  } else {
    var postData = this.send_get_taxonomic_id(token, ref, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_get_taxonomic_id);
  }
};

taxon.thrift_serviceClient.prototype.send_get_taxonomic_id = function(token, ref, callback) {
  this.output.writeMessageBegin('get_taxonomic_id', Thrift.MessageType.CALL, this.seqid);
  var args = new taxon.thrift_service_get_taxonomic_id_args();
  args.token = token;
  args.ref = ref;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

taxon.thrift_serviceClient.prototype.recv_get_taxonomic_id = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype === Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new taxon.thrift_service_get_taxonomic_id_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.failure) {
    throw result.failure;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'get_taxonomic_id failed: unknown result';
};
taxon.thrift_serviceClient.prototype.get_kingdom = function(token, ref, callback) {
  if (callback === undefined) {
    this.send_get_kingdom(token, ref);
    return this.recv_get_kingdom();
  } else {
    var postData = this.send_get_kingdom(token, ref, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_get_kingdom);
  }
};

taxon.thrift_serviceClient.prototype.send_get_kingdom = function(token, ref, callback) {
  this.output.writeMessageBegin('get_kingdom', Thrift.MessageType.CALL, this.seqid);
  var args = new taxon.thrift_service_get_kingdom_args();
  args.token = token;
  args.ref = ref;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

taxon.thrift_serviceClient.prototype.recv_get_kingdom = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype === Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new taxon.thrift_service_get_kingdom_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.failure) {
    throw result.failure;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'get_kingdom failed: unknown result';
};
taxon.thrift_serviceClient.prototype.get_domain = function(token, ref, callback) {
  if (callback === undefined) {
    this.send_get_domain(token, ref);
    return this.recv_get_domain();
  } else {
    var postData = this.send_get_domain(token, ref, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_get_domain);
  }
};

taxon.thrift_serviceClient.prototype.send_get_domain = function(token, ref, callback) {
  this.output.writeMessageBegin('get_domain', Thrift.MessageType.CALL, this.seqid);
  var args = new taxon.thrift_service_get_domain_args();
  args.token = token;
  args.ref = ref;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

taxon.thrift_serviceClient.prototype.recv_get_domain = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype === Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new taxon.thrift_service_get_domain_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.failure) {
    throw result.failure;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'get_domain failed: unknown result';
};
taxon.thrift_serviceClient.prototype.get_genetic_code = function(token, ref, callback) {
  if (callback === undefined) {
    this.send_get_genetic_code(token, ref);
    return this.recv_get_genetic_code();
  } else {
    var postData = this.send_get_genetic_code(token, ref, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_get_genetic_code);
  }
};

taxon.thrift_serviceClient.prototype.send_get_genetic_code = function(token, ref, callback) {
  this.output.writeMessageBegin('get_genetic_code', Thrift.MessageType.CALL, this.seqid);
  var args = new taxon.thrift_service_get_genetic_code_args();
  args.token = token;
  args.ref = ref;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

taxon.thrift_serviceClient.prototype.recv_get_genetic_code = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype === Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new taxon.thrift_service_get_genetic_code_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.failure) {
    throw result.failure;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'get_genetic_code failed: unknown result';
};
taxon.thrift_serviceClient.prototype.get_aliases = function(token, ref, callback) {
  if (callback === undefined) {
    this.send_get_aliases(token, ref);
    return this.recv_get_aliases();
  } else {
    var postData = this.send_get_aliases(token, ref, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_get_aliases);
  }
};

taxon.thrift_serviceClient.prototype.send_get_aliases = function(token, ref, callback) {
  this.output.writeMessageBegin('get_aliases', Thrift.MessageType.CALL, this.seqid);
  var args = new taxon.thrift_service_get_aliases_args();
  args.token = token;
  args.ref = ref;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

taxon.thrift_serviceClient.prototype.recv_get_aliases = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype === Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new taxon.thrift_service_get_aliases_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.failure) {
    throw result.failure;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'get_aliases failed: unknown result';
};

return taxon;
});
