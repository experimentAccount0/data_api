/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.TreeSet;
import java.util.TreeMap;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-7-15")
public class Summary_data implements org.apache.thrift.TBase<Summary_data, Summary_data._Fields>, java.io.Serializable, Cloneable, Comparable<Summary_data> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Summary_data");

  private static final org.apache.thrift.protocol.TField SCIENTIFIC_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("scientific_name", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField TAXONOMY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("taxonomy_id", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField KINGDOM_FIELD_DESC = new org.apache.thrift.protocol.TField("kingdom", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField SCIENTIFIC_LINEAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("scientific_lineage", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField GENETIC_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("genetic_code", org.apache.thrift.protocol.TType.BYTE, (short)5);
  private static final org.apache.thrift.protocol.TField ORGANISM_ALIASES_FIELD_DESC = new org.apache.thrift.protocol.TField("organism_aliases", org.apache.thrift.protocol.TType.LIST, (short)6);
  private static final org.apache.thrift.protocol.TField ASSEMBLY_SOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("assembly_source", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField ASSEMBLY_SOURCE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("assembly_source_id", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField ASSEMBLY_SOURCE_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("assembly_source_date", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField GC_CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("gc_content", org.apache.thrift.protocol.TType.DOUBLE, (short)10);
  private static final org.apache.thrift.protocol.TField DNA_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("dna_size", org.apache.thrift.protocol.TType.I64, (short)11);
  private static final org.apache.thrift.protocol.TField NUM_CONTIGS_FIELD_DESC = new org.apache.thrift.protocol.TField("num_contigs", org.apache.thrift.protocol.TType.I64, (short)12);
  private static final org.apache.thrift.protocol.TField CONTIG_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("contig_ids", org.apache.thrift.protocol.TType.LIST, (short)13);
  private static final org.apache.thrift.protocol.TField EXTERNAL_SOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("external_source", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField EXTERNAL_SOURCE_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("external_source_date", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField RELEASE_FIELD_DESC = new org.apache.thrift.protocol.TField("release", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField ORIGINAL_SOURCE_FILENAME_FIELD_DESC = new org.apache.thrift.protocol.TField("original_source_filename", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField FEATURE_TYPE_COUNTS_FIELD_DESC = new org.apache.thrift.protocol.TField("feature_type_counts", org.apache.thrift.protocol.TType.MAP, (short)18);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new Summary_dataStandardSchemeFactory());
    schemes.put(TupleScheme.class, new Summary_dataTupleSchemeFactory());
  }

  /**
   * Scientific name of the organism.
   */
  public String scientific_name; // required
  /**
   * NCBI taxonomic id of the organism.
   */
  public long taxonomy_id; // required
  /**
   * Taxonomic kingdom of the organism.
   */
  public String kingdom; // required
  /**
   * Scientific lineage of the organism.
   */
  public List<String> scientific_lineage; // required
  /**
   * Scientific name of the organism.
   */
  public byte genetic_code; // required
  /**
   * Aliases for the organism associated with this GenomeAnnotation.
   */
  public List<String> organism_aliases; // required
  /**
   * Source organization for the Assembly.
   */
  public String assembly_source; // required
  /**
   * Identifier for the Assembly used by the source organization.
   */
  public String assembly_source_id; // required
  /**
   * Date of origin the source indicates for the Assembly.
   */
  public String assembly_source_date; // required
  /**
   * GC content for the entire Assembly.
   */
  public double gc_content; // required
  /**
   * Total DNA size for the Assembly.
   */
  public long dna_size; // required
  /**
   * Number of contigs in the Assembly.
   */
  public long num_contigs; // required
  /**
   * Contig identifier strings for the Assembly.
   */
  public List<String> contig_ids; // required
  /**
   * Name of the external source.
   */
  public String external_source; // required
  /**
   * Date of origin the external source indicates for this GenomeAnnotation.
   */
  public String external_source_date; // required
  /**
   * Release version for this GenomeAnnotation data.
   */
  public String release; // required
  /**
   * Name of the file used to generate this GenomeAnnotation.
   */
  public String original_source_filename; // required
  /**
   * Number of features of each type.
   */
  public Map<String,Long> feature_type_counts; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * Scientific name of the organism.
     */
    SCIENTIFIC_NAME((short)1, "scientific_name"),
    /**
     * NCBI taxonomic id of the organism.
     */
    TAXONOMY_ID((short)2, "taxonomy_id"),
    /**
     * Taxonomic kingdom of the organism.
     */
    KINGDOM((short)3, "kingdom"),
    /**
     * Scientific lineage of the organism.
     */
    SCIENTIFIC_LINEAGE((short)4, "scientific_lineage"),
    /**
     * Scientific name of the organism.
     */
    GENETIC_CODE((short)5, "genetic_code"),
    /**
     * Aliases for the organism associated with this GenomeAnnotation.
     */
    ORGANISM_ALIASES((short)6, "organism_aliases"),
    /**
     * Source organization for the Assembly.
     */
    ASSEMBLY_SOURCE((short)7, "assembly_source"),
    /**
     * Identifier for the Assembly used by the source organization.
     */
    ASSEMBLY_SOURCE_ID((short)8, "assembly_source_id"),
    /**
     * Date of origin the source indicates for the Assembly.
     */
    ASSEMBLY_SOURCE_DATE((short)9, "assembly_source_date"),
    /**
     * GC content for the entire Assembly.
     */
    GC_CONTENT((short)10, "gc_content"),
    /**
     * Total DNA size for the Assembly.
     */
    DNA_SIZE((short)11, "dna_size"),
    /**
     * Number of contigs in the Assembly.
     */
    NUM_CONTIGS((short)12, "num_contigs"),
    /**
     * Contig identifier strings for the Assembly.
     */
    CONTIG_IDS((short)13, "contig_ids"),
    /**
     * Name of the external source.
     */
    EXTERNAL_SOURCE((short)14, "external_source"),
    /**
     * Date of origin the external source indicates for this GenomeAnnotation.
     */
    EXTERNAL_SOURCE_DATE((short)15, "external_source_date"),
    /**
     * Release version for this GenomeAnnotation data.
     */
    RELEASE((short)16, "release"),
    /**
     * Name of the file used to generate this GenomeAnnotation.
     */
    ORIGINAL_SOURCE_FILENAME((short)17, "original_source_filename"),
    /**
     * Number of features of each type.
     */
    FEATURE_TYPE_COUNTS((short)18, "feature_type_counts");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SCIENTIFIC_NAME
          return SCIENTIFIC_NAME;
        case 2: // TAXONOMY_ID
          return TAXONOMY_ID;
        case 3: // KINGDOM
          return KINGDOM;
        case 4: // SCIENTIFIC_LINEAGE
          return SCIENTIFIC_LINEAGE;
        case 5: // GENETIC_CODE
          return GENETIC_CODE;
        case 6: // ORGANISM_ALIASES
          return ORGANISM_ALIASES;
        case 7: // ASSEMBLY_SOURCE
          return ASSEMBLY_SOURCE;
        case 8: // ASSEMBLY_SOURCE_ID
          return ASSEMBLY_SOURCE_ID;
        case 9: // ASSEMBLY_SOURCE_DATE
          return ASSEMBLY_SOURCE_DATE;
        case 10: // GC_CONTENT
          return GC_CONTENT;
        case 11: // DNA_SIZE
          return DNA_SIZE;
        case 12: // NUM_CONTIGS
          return NUM_CONTIGS;
        case 13: // CONTIG_IDS
          return CONTIG_IDS;
        case 14: // EXTERNAL_SOURCE
          return EXTERNAL_SOURCE;
        case 15: // EXTERNAL_SOURCE_DATE
          return EXTERNAL_SOURCE_DATE;
        case 16: // RELEASE
          return RELEASE;
        case 17: // ORIGINAL_SOURCE_FILENAME
          return ORIGINAL_SOURCE_FILENAME;
        case 18: // FEATURE_TYPE_COUNTS
          return FEATURE_TYPE_COUNTS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TAXONOMY_ID_ISSET_ID = 0;
  private static final int __GENETIC_CODE_ISSET_ID = 1;
  private static final int __GC_CONTENT_ISSET_ID = 2;
  private static final int __DNA_SIZE_ISSET_ID = 3;
  private static final int __NUM_CONTIGS_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SCIENTIFIC_NAME, new org.apache.thrift.meta_data.FieldMetaData("scientific_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TAXONOMY_ID, new org.apache.thrift.meta_data.FieldMetaData("taxonomy_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.KINGDOM, new org.apache.thrift.meta_data.FieldMetaData("kingdom", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SCIENTIFIC_LINEAGE, new org.apache.thrift.meta_data.FieldMetaData("scientific_lineage", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.GENETIC_CODE, new org.apache.thrift.meta_data.FieldMetaData("genetic_code", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.ORGANISM_ALIASES, new org.apache.thrift.meta_data.FieldMetaData("organism_aliases", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.ASSEMBLY_SOURCE, new org.apache.thrift.meta_data.FieldMetaData("assembly_source", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ASSEMBLY_SOURCE_ID, new org.apache.thrift.meta_data.FieldMetaData("assembly_source_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ASSEMBLY_SOURCE_DATE, new org.apache.thrift.meta_data.FieldMetaData("assembly_source_date", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GC_CONTENT, new org.apache.thrift.meta_data.FieldMetaData("gc_content", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.DNA_SIZE, new org.apache.thrift.meta_data.FieldMetaData("dna_size", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.NUM_CONTIGS, new org.apache.thrift.meta_data.FieldMetaData("num_contigs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CONTIG_IDS, new org.apache.thrift.meta_data.FieldMetaData("contig_ids", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.EXTERNAL_SOURCE, new org.apache.thrift.meta_data.FieldMetaData("external_source", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EXTERNAL_SOURCE_DATE, new org.apache.thrift.meta_data.FieldMetaData("external_source_date", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RELEASE, new org.apache.thrift.meta_data.FieldMetaData("release", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ORIGINAL_SOURCE_FILENAME, new org.apache.thrift.meta_data.FieldMetaData("original_source_filename", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FEATURE_TYPE_COUNTS, new org.apache.thrift.meta_data.FieldMetaData("feature_type_counts", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Summary_data.class, metaDataMap);
  }

  public Summary_data() {
  }

  public Summary_data(
    String scientific_name,
    long taxonomy_id,
    String kingdom,
    List<String> scientific_lineage,
    byte genetic_code,
    List<String> organism_aliases,
    String assembly_source,
    String assembly_source_id,
    String assembly_source_date,
    double gc_content,
    long dna_size,
    long num_contigs,
    List<String> contig_ids,
    String external_source,
    String external_source_date,
    String release,
    String original_source_filename,
    Map<String,Long> feature_type_counts)
  {
    this();
    this.scientific_name = scientific_name;
    this.taxonomy_id = taxonomy_id;
    setTaxonomy_idIsSet(true);
    this.kingdom = kingdom;
    this.scientific_lineage = scientific_lineage;
    this.genetic_code = genetic_code;
    setGenetic_codeIsSet(true);
    this.organism_aliases = organism_aliases;
    this.assembly_source = assembly_source;
    this.assembly_source_id = assembly_source_id;
    this.assembly_source_date = assembly_source_date;
    this.gc_content = gc_content;
    setGc_contentIsSet(true);
    this.dna_size = dna_size;
    setDna_sizeIsSet(true);
    this.num_contigs = num_contigs;
    setNum_contigsIsSet(true);
    this.contig_ids = contig_ids;
    this.external_source = external_source;
    this.external_source_date = external_source_date;
    this.release = release;
    this.original_source_filename = original_source_filename;
    this.feature_type_counts = feature_type_counts;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Summary_data(Summary_data other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetScientific_name()) {
      this.scientific_name = other.scientific_name;
    }
    this.taxonomy_id = other.taxonomy_id;
    if (other.isSetKingdom()) {
      this.kingdom = other.kingdom;
    }
    if (other.isSetScientific_lineage()) {
      List<String> __this__scientific_lineage = new ArrayList<String>(other.scientific_lineage);
      this.scientific_lineage = __this__scientific_lineage;
    }
    this.genetic_code = other.genetic_code;
    if (other.isSetOrganism_aliases()) {
      List<String> __this__organism_aliases = new ArrayList<String>(other.organism_aliases);
      this.organism_aliases = __this__organism_aliases;
    }
    if (other.isSetAssembly_source()) {
      this.assembly_source = other.assembly_source;
    }
    if (other.isSetAssembly_source_id()) {
      this.assembly_source_id = other.assembly_source_id;
    }
    if (other.isSetAssembly_source_date()) {
      this.assembly_source_date = other.assembly_source_date;
    }
    this.gc_content = other.gc_content;
    this.dna_size = other.dna_size;
    this.num_contigs = other.num_contigs;
    if (other.isSetContig_ids()) {
      List<String> __this__contig_ids = new ArrayList<String>(other.contig_ids);
      this.contig_ids = __this__contig_ids;
    }
    if (other.isSetExternal_source()) {
      this.external_source = other.external_source;
    }
    if (other.isSetExternal_source_date()) {
      this.external_source_date = other.external_source_date;
    }
    if (other.isSetRelease()) {
      this.release = other.release;
    }
    if (other.isSetOriginal_source_filename()) {
      this.original_source_filename = other.original_source_filename;
    }
    if (other.isSetFeature_type_counts()) {
      Map<String,Long> __this__feature_type_counts = new TreeMap<String,Long>(other.feature_type_counts);
      this.feature_type_counts = __this__feature_type_counts;
    }
  }

  public Summary_data deepCopy() {
    return new Summary_data(this);
  }

  @Override
  public void clear() {
    this.scientific_name = null;
    setTaxonomy_idIsSet(false);
    this.taxonomy_id = 0;
    this.kingdom = null;
    this.scientific_lineage = null;
    setGenetic_codeIsSet(false);
    this.genetic_code = 0;
    this.organism_aliases = null;
    this.assembly_source = null;
    this.assembly_source_id = null;
    this.assembly_source_date = null;
    setGc_contentIsSet(false);
    this.gc_content = 0.0;
    setDna_sizeIsSet(false);
    this.dna_size = 0;
    setNum_contigsIsSet(false);
    this.num_contigs = 0;
    this.contig_ids = null;
    this.external_source = null;
    this.external_source_date = null;
    this.release = null;
    this.original_source_filename = null;
    this.feature_type_counts = null;
  }

  /**
   * Scientific name of the organism.
   */
  public String getScientific_name() {
    return this.scientific_name;
  }

  /**
   * Scientific name of the organism.
   */
  public Summary_data setScientific_name(String scientific_name) {
    this.scientific_name = scientific_name;
    return this;
  }

  public void unsetScientific_name() {
    this.scientific_name = null;
  }

  /** Returns true if field scientific_name is set (has been assigned a value) and false otherwise */
  public boolean isSetScientific_name() {
    return this.scientific_name != null;
  }

  public void setScientific_nameIsSet(boolean value) {
    if (!value) {
      this.scientific_name = null;
    }
  }

  /**
   * NCBI taxonomic id of the organism.
   */
  public long getTaxonomy_id() {
    return this.taxonomy_id;
  }

  /**
   * NCBI taxonomic id of the organism.
   */
  public Summary_data setTaxonomy_id(long taxonomy_id) {
    this.taxonomy_id = taxonomy_id;
    setTaxonomy_idIsSet(true);
    return this;
  }

  public void unsetTaxonomy_id() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TAXONOMY_ID_ISSET_ID);
  }

  /** Returns true if field taxonomy_id is set (has been assigned a value) and false otherwise */
  public boolean isSetTaxonomy_id() {
    return EncodingUtils.testBit(__isset_bitfield, __TAXONOMY_ID_ISSET_ID);
  }

  public void setTaxonomy_idIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TAXONOMY_ID_ISSET_ID, value);
  }

  /**
   * Taxonomic kingdom of the organism.
   */
  public String getKingdom() {
    return this.kingdom;
  }

  /**
   * Taxonomic kingdom of the organism.
   */
  public Summary_data setKingdom(String kingdom) {
    this.kingdom = kingdom;
    return this;
  }

  public void unsetKingdom() {
    this.kingdom = null;
  }

  /** Returns true if field kingdom is set (has been assigned a value) and false otherwise */
  public boolean isSetKingdom() {
    return this.kingdom != null;
  }

  public void setKingdomIsSet(boolean value) {
    if (!value) {
      this.kingdom = null;
    }
  }

  public int getScientific_lineageSize() {
    return (this.scientific_lineage == null) ? 0 : this.scientific_lineage.size();
  }

  public java.util.Iterator<String> getScientific_lineageIterator() {
    return (this.scientific_lineage == null) ? null : this.scientific_lineage.iterator();
  }

  public void addToScientific_lineage(String elem) {
    if (this.scientific_lineage == null) {
      this.scientific_lineage = new ArrayList<String>();
    }
    this.scientific_lineage.add(elem);
  }

  /**
   * Scientific lineage of the organism.
   */
  public List<String> getScientific_lineage() {
    return this.scientific_lineage;
  }

  /**
   * Scientific lineage of the organism.
   */
  public Summary_data setScientific_lineage(List<String> scientific_lineage) {
    this.scientific_lineage = scientific_lineage;
    return this;
  }

  public void unsetScientific_lineage() {
    this.scientific_lineage = null;
  }

  /** Returns true if field scientific_lineage is set (has been assigned a value) and false otherwise */
  public boolean isSetScientific_lineage() {
    return this.scientific_lineage != null;
  }

  public void setScientific_lineageIsSet(boolean value) {
    if (!value) {
      this.scientific_lineage = null;
    }
  }

  /**
   * Scientific name of the organism.
   */
  public byte getGenetic_code() {
    return this.genetic_code;
  }

  /**
   * Scientific name of the organism.
   */
  public Summary_data setGenetic_code(byte genetic_code) {
    this.genetic_code = genetic_code;
    setGenetic_codeIsSet(true);
    return this;
  }

  public void unsetGenetic_code() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GENETIC_CODE_ISSET_ID);
  }

  /** Returns true if field genetic_code is set (has been assigned a value) and false otherwise */
  public boolean isSetGenetic_code() {
    return EncodingUtils.testBit(__isset_bitfield, __GENETIC_CODE_ISSET_ID);
  }

  public void setGenetic_codeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GENETIC_CODE_ISSET_ID, value);
  }

  public int getOrganism_aliasesSize() {
    return (this.organism_aliases == null) ? 0 : this.organism_aliases.size();
  }

  public java.util.Iterator<String> getOrganism_aliasesIterator() {
    return (this.organism_aliases == null) ? null : this.organism_aliases.iterator();
  }

  public void addToOrganism_aliases(String elem) {
    if (this.organism_aliases == null) {
      this.organism_aliases = new ArrayList<String>();
    }
    this.organism_aliases.add(elem);
  }

  /**
   * Aliases for the organism associated with this GenomeAnnotation.
   */
  public List<String> getOrganism_aliases() {
    return this.organism_aliases;
  }

  /**
   * Aliases for the organism associated with this GenomeAnnotation.
   */
  public Summary_data setOrganism_aliases(List<String> organism_aliases) {
    this.organism_aliases = organism_aliases;
    return this;
  }

  public void unsetOrganism_aliases() {
    this.organism_aliases = null;
  }

  /** Returns true if field organism_aliases is set (has been assigned a value) and false otherwise */
  public boolean isSetOrganism_aliases() {
    return this.organism_aliases != null;
  }

  public void setOrganism_aliasesIsSet(boolean value) {
    if (!value) {
      this.organism_aliases = null;
    }
  }

  /**
   * Source organization for the Assembly.
   */
  public String getAssembly_source() {
    return this.assembly_source;
  }

  /**
   * Source organization for the Assembly.
   */
  public Summary_data setAssembly_source(String assembly_source) {
    this.assembly_source = assembly_source;
    return this;
  }

  public void unsetAssembly_source() {
    this.assembly_source = null;
  }

  /** Returns true if field assembly_source is set (has been assigned a value) and false otherwise */
  public boolean isSetAssembly_source() {
    return this.assembly_source != null;
  }

  public void setAssembly_sourceIsSet(boolean value) {
    if (!value) {
      this.assembly_source = null;
    }
  }

  /**
   * Identifier for the Assembly used by the source organization.
   */
  public String getAssembly_source_id() {
    return this.assembly_source_id;
  }

  /**
   * Identifier for the Assembly used by the source organization.
   */
  public Summary_data setAssembly_source_id(String assembly_source_id) {
    this.assembly_source_id = assembly_source_id;
    return this;
  }

  public void unsetAssembly_source_id() {
    this.assembly_source_id = null;
  }

  /** Returns true if field assembly_source_id is set (has been assigned a value) and false otherwise */
  public boolean isSetAssembly_source_id() {
    return this.assembly_source_id != null;
  }

  public void setAssembly_source_idIsSet(boolean value) {
    if (!value) {
      this.assembly_source_id = null;
    }
  }

  /**
   * Date of origin the source indicates for the Assembly.
   */
  public String getAssembly_source_date() {
    return this.assembly_source_date;
  }

  /**
   * Date of origin the source indicates for the Assembly.
   */
  public Summary_data setAssembly_source_date(String assembly_source_date) {
    this.assembly_source_date = assembly_source_date;
    return this;
  }

  public void unsetAssembly_source_date() {
    this.assembly_source_date = null;
  }

  /** Returns true if field assembly_source_date is set (has been assigned a value) and false otherwise */
  public boolean isSetAssembly_source_date() {
    return this.assembly_source_date != null;
  }

  public void setAssembly_source_dateIsSet(boolean value) {
    if (!value) {
      this.assembly_source_date = null;
    }
  }

  /**
   * GC content for the entire Assembly.
   */
  public double getGc_content() {
    return this.gc_content;
  }

  /**
   * GC content for the entire Assembly.
   */
  public Summary_data setGc_content(double gc_content) {
    this.gc_content = gc_content;
    setGc_contentIsSet(true);
    return this;
  }

  public void unsetGc_content() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GC_CONTENT_ISSET_ID);
  }

  /** Returns true if field gc_content is set (has been assigned a value) and false otherwise */
  public boolean isSetGc_content() {
    return EncodingUtils.testBit(__isset_bitfield, __GC_CONTENT_ISSET_ID);
  }

  public void setGc_contentIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GC_CONTENT_ISSET_ID, value);
  }

  /**
   * Total DNA size for the Assembly.
   */
  public long getDna_size() {
    return this.dna_size;
  }

  /**
   * Total DNA size for the Assembly.
   */
  public Summary_data setDna_size(long dna_size) {
    this.dna_size = dna_size;
    setDna_sizeIsSet(true);
    return this;
  }

  public void unsetDna_size() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DNA_SIZE_ISSET_ID);
  }

  /** Returns true if field dna_size is set (has been assigned a value) and false otherwise */
  public boolean isSetDna_size() {
    return EncodingUtils.testBit(__isset_bitfield, __DNA_SIZE_ISSET_ID);
  }

  public void setDna_sizeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DNA_SIZE_ISSET_ID, value);
  }

  /**
   * Number of contigs in the Assembly.
   */
  public long getNum_contigs() {
    return this.num_contigs;
  }

  /**
   * Number of contigs in the Assembly.
   */
  public Summary_data setNum_contigs(long num_contigs) {
    this.num_contigs = num_contigs;
    setNum_contigsIsSet(true);
    return this;
  }

  public void unsetNum_contigs() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUM_CONTIGS_ISSET_ID);
  }

  /** Returns true if field num_contigs is set (has been assigned a value) and false otherwise */
  public boolean isSetNum_contigs() {
    return EncodingUtils.testBit(__isset_bitfield, __NUM_CONTIGS_ISSET_ID);
  }

  public void setNum_contigsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUM_CONTIGS_ISSET_ID, value);
  }

  public int getContig_idsSize() {
    return (this.contig_ids == null) ? 0 : this.contig_ids.size();
  }

  public java.util.Iterator<String> getContig_idsIterator() {
    return (this.contig_ids == null) ? null : this.contig_ids.iterator();
  }

  public void addToContig_ids(String elem) {
    if (this.contig_ids == null) {
      this.contig_ids = new ArrayList<String>();
    }
    this.contig_ids.add(elem);
  }

  /**
   * Contig identifier strings for the Assembly.
   */
  public List<String> getContig_ids() {
    return this.contig_ids;
  }

  /**
   * Contig identifier strings for the Assembly.
   */
  public Summary_data setContig_ids(List<String> contig_ids) {
    this.contig_ids = contig_ids;
    return this;
  }

  public void unsetContig_ids() {
    this.contig_ids = null;
  }

  /** Returns true if field contig_ids is set (has been assigned a value) and false otherwise */
  public boolean isSetContig_ids() {
    return this.contig_ids != null;
  }

  public void setContig_idsIsSet(boolean value) {
    if (!value) {
      this.contig_ids = null;
    }
  }

  /**
   * Name of the external source.
   */
  public String getExternal_source() {
    return this.external_source;
  }

  /**
   * Name of the external source.
   */
  public Summary_data setExternal_source(String external_source) {
    this.external_source = external_source;
    return this;
  }

  public void unsetExternal_source() {
    this.external_source = null;
  }

  /** Returns true if field external_source is set (has been assigned a value) and false otherwise */
  public boolean isSetExternal_source() {
    return this.external_source != null;
  }

  public void setExternal_sourceIsSet(boolean value) {
    if (!value) {
      this.external_source = null;
    }
  }

  /**
   * Date of origin the external source indicates for this GenomeAnnotation.
   */
  public String getExternal_source_date() {
    return this.external_source_date;
  }

  /**
   * Date of origin the external source indicates for this GenomeAnnotation.
   */
  public Summary_data setExternal_source_date(String external_source_date) {
    this.external_source_date = external_source_date;
    return this;
  }

  public void unsetExternal_source_date() {
    this.external_source_date = null;
  }

  /** Returns true if field external_source_date is set (has been assigned a value) and false otherwise */
  public boolean isSetExternal_source_date() {
    return this.external_source_date != null;
  }

  public void setExternal_source_dateIsSet(boolean value) {
    if (!value) {
      this.external_source_date = null;
    }
  }

  /**
   * Release version for this GenomeAnnotation data.
   */
  public String getRelease() {
    return this.release;
  }

  /**
   * Release version for this GenomeAnnotation data.
   */
  public Summary_data setRelease(String release) {
    this.release = release;
    return this;
  }

  public void unsetRelease() {
    this.release = null;
  }

  /** Returns true if field release is set (has been assigned a value) and false otherwise */
  public boolean isSetRelease() {
    return this.release != null;
  }

  public void setReleaseIsSet(boolean value) {
    if (!value) {
      this.release = null;
    }
  }

  /**
   * Name of the file used to generate this GenomeAnnotation.
   */
  public String getOriginal_source_filename() {
    return this.original_source_filename;
  }

  /**
   * Name of the file used to generate this GenomeAnnotation.
   */
  public Summary_data setOriginal_source_filename(String original_source_filename) {
    this.original_source_filename = original_source_filename;
    return this;
  }

  public void unsetOriginal_source_filename() {
    this.original_source_filename = null;
  }

  /** Returns true if field original_source_filename is set (has been assigned a value) and false otherwise */
  public boolean isSetOriginal_source_filename() {
    return this.original_source_filename != null;
  }

  public void setOriginal_source_filenameIsSet(boolean value) {
    if (!value) {
      this.original_source_filename = null;
    }
  }

  public int getFeature_type_countsSize() {
    return (this.feature_type_counts == null) ? 0 : this.feature_type_counts.size();
  }

  public void putToFeature_type_counts(String key, long val) {
    if (this.feature_type_counts == null) {
      this.feature_type_counts = new TreeMap<String,Long>();
    }
    this.feature_type_counts.put(key, val);
  }

  /**
   * Number of features of each type.
   */
  public Map<String,Long> getFeature_type_counts() {
    return this.feature_type_counts;
  }

  /**
   * Number of features of each type.
   */
  public Summary_data setFeature_type_counts(Map<String,Long> feature_type_counts) {
    this.feature_type_counts = feature_type_counts;
    return this;
  }

  public void unsetFeature_type_counts() {
    this.feature_type_counts = null;
  }

  /** Returns true if field feature_type_counts is set (has been assigned a value) and false otherwise */
  public boolean isSetFeature_type_counts() {
    return this.feature_type_counts != null;
  }

  public void setFeature_type_countsIsSet(boolean value) {
    if (!value) {
      this.feature_type_counts = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SCIENTIFIC_NAME:
      if (value == null) {
        unsetScientific_name();
      } else {
        setScientific_name((String)value);
      }
      break;

    case TAXONOMY_ID:
      if (value == null) {
        unsetTaxonomy_id();
      } else {
        setTaxonomy_id((Long)value);
      }
      break;

    case KINGDOM:
      if (value == null) {
        unsetKingdom();
      } else {
        setKingdom((String)value);
      }
      break;

    case SCIENTIFIC_LINEAGE:
      if (value == null) {
        unsetScientific_lineage();
      } else {
        setScientific_lineage((List<String>)value);
      }
      break;

    case GENETIC_CODE:
      if (value == null) {
        unsetGenetic_code();
      } else {
        setGenetic_code((Byte)value);
      }
      break;

    case ORGANISM_ALIASES:
      if (value == null) {
        unsetOrganism_aliases();
      } else {
        setOrganism_aliases((List<String>)value);
      }
      break;

    case ASSEMBLY_SOURCE:
      if (value == null) {
        unsetAssembly_source();
      } else {
        setAssembly_source((String)value);
      }
      break;

    case ASSEMBLY_SOURCE_ID:
      if (value == null) {
        unsetAssembly_source_id();
      } else {
        setAssembly_source_id((String)value);
      }
      break;

    case ASSEMBLY_SOURCE_DATE:
      if (value == null) {
        unsetAssembly_source_date();
      } else {
        setAssembly_source_date((String)value);
      }
      break;

    case GC_CONTENT:
      if (value == null) {
        unsetGc_content();
      } else {
        setGc_content((Double)value);
      }
      break;

    case DNA_SIZE:
      if (value == null) {
        unsetDna_size();
      } else {
        setDna_size((Long)value);
      }
      break;

    case NUM_CONTIGS:
      if (value == null) {
        unsetNum_contigs();
      } else {
        setNum_contigs((Long)value);
      }
      break;

    case CONTIG_IDS:
      if (value == null) {
        unsetContig_ids();
      } else {
        setContig_ids((List<String>)value);
      }
      break;

    case EXTERNAL_SOURCE:
      if (value == null) {
        unsetExternal_source();
      } else {
        setExternal_source((String)value);
      }
      break;

    case EXTERNAL_SOURCE_DATE:
      if (value == null) {
        unsetExternal_source_date();
      } else {
        setExternal_source_date((String)value);
      }
      break;

    case RELEASE:
      if (value == null) {
        unsetRelease();
      } else {
        setRelease((String)value);
      }
      break;

    case ORIGINAL_SOURCE_FILENAME:
      if (value == null) {
        unsetOriginal_source_filename();
      } else {
        setOriginal_source_filename((String)value);
      }
      break;

    case FEATURE_TYPE_COUNTS:
      if (value == null) {
        unsetFeature_type_counts();
      } else {
        setFeature_type_counts((Map<String,Long>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SCIENTIFIC_NAME:
      return getScientific_name();

    case TAXONOMY_ID:
      return Long.valueOf(getTaxonomy_id());

    case KINGDOM:
      return getKingdom();

    case SCIENTIFIC_LINEAGE:
      return getScientific_lineage();

    case GENETIC_CODE:
      return Byte.valueOf(getGenetic_code());

    case ORGANISM_ALIASES:
      return getOrganism_aliases();

    case ASSEMBLY_SOURCE:
      return getAssembly_source();

    case ASSEMBLY_SOURCE_ID:
      return getAssembly_source_id();

    case ASSEMBLY_SOURCE_DATE:
      return getAssembly_source_date();

    case GC_CONTENT:
      return Double.valueOf(getGc_content());

    case DNA_SIZE:
      return Long.valueOf(getDna_size());

    case NUM_CONTIGS:
      return Long.valueOf(getNum_contigs());

    case CONTIG_IDS:
      return getContig_ids();

    case EXTERNAL_SOURCE:
      return getExternal_source();

    case EXTERNAL_SOURCE_DATE:
      return getExternal_source_date();

    case RELEASE:
      return getRelease();

    case ORIGINAL_SOURCE_FILENAME:
      return getOriginal_source_filename();

    case FEATURE_TYPE_COUNTS:
      return getFeature_type_counts();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SCIENTIFIC_NAME:
      return isSetScientific_name();
    case TAXONOMY_ID:
      return isSetTaxonomy_id();
    case KINGDOM:
      return isSetKingdom();
    case SCIENTIFIC_LINEAGE:
      return isSetScientific_lineage();
    case GENETIC_CODE:
      return isSetGenetic_code();
    case ORGANISM_ALIASES:
      return isSetOrganism_aliases();
    case ASSEMBLY_SOURCE:
      return isSetAssembly_source();
    case ASSEMBLY_SOURCE_ID:
      return isSetAssembly_source_id();
    case ASSEMBLY_SOURCE_DATE:
      return isSetAssembly_source_date();
    case GC_CONTENT:
      return isSetGc_content();
    case DNA_SIZE:
      return isSetDna_size();
    case NUM_CONTIGS:
      return isSetNum_contigs();
    case CONTIG_IDS:
      return isSetContig_ids();
    case EXTERNAL_SOURCE:
      return isSetExternal_source();
    case EXTERNAL_SOURCE_DATE:
      return isSetExternal_source_date();
    case RELEASE:
      return isSetRelease();
    case ORIGINAL_SOURCE_FILENAME:
      return isSetOriginal_source_filename();
    case FEATURE_TYPE_COUNTS:
      return isSetFeature_type_counts();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Summary_data)
      return this.equals((Summary_data)that);
    return false;
  }

  public boolean equals(Summary_data that) {
    if (that == null)
      return false;

    boolean this_present_scientific_name = true && this.isSetScientific_name();
    boolean that_present_scientific_name = true && that.isSetScientific_name();
    if (this_present_scientific_name || that_present_scientific_name) {
      if (!(this_present_scientific_name && that_present_scientific_name))
        return false;
      if (!this.scientific_name.equals(that.scientific_name))
        return false;
    }

    boolean this_present_taxonomy_id = true;
    boolean that_present_taxonomy_id = true;
    if (this_present_taxonomy_id || that_present_taxonomy_id) {
      if (!(this_present_taxonomy_id && that_present_taxonomy_id))
        return false;
      if (this.taxonomy_id != that.taxonomy_id)
        return false;
    }

    boolean this_present_kingdom = true && this.isSetKingdom();
    boolean that_present_kingdom = true && that.isSetKingdom();
    if (this_present_kingdom || that_present_kingdom) {
      if (!(this_present_kingdom && that_present_kingdom))
        return false;
      if (!this.kingdom.equals(that.kingdom))
        return false;
    }

    boolean this_present_scientific_lineage = true && this.isSetScientific_lineage();
    boolean that_present_scientific_lineage = true && that.isSetScientific_lineage();
    if (this_present_scientific_lineage || that_present_scientific_lineage) {
      if (!(this_present_scientific_lineage && that_present_scientific_lineage))
        return false;
      if (!this.scientific_lineage.equals(that.scientific_lineage))
        return false;
    }

    boolean this_present_genetic_code = true;
    boolean that_present_genetic_code = true;
    if (this_present_genetic_code || that_present_genetic_code) {
      if (!(this_present_genetic_code && that_present_genetic_code))
        return false;
      if (this.genetic_code != that.genetic_code)
        return false;
    }

    boolean this_present_organism_aliases = true && this.isSetOrganism_aliases();
    boolean that_present_organism_aliases = true && that.isSetOrganism_aliases();
    if (this_present_organism_aliases || that_present_organism_aliases) {
      if (!(this_present_organism_aliases && that_present_organism_aliases))
        return false;
      if (!this.organism_aliases.equals(that.organism_aliases))
        return false;
    }

    boolean this_present_assembly_source = true && this.isSetAssembly_source();
    boolean that_present_assembly_source = true && that.isSetAssembly_source();
    if (this_present_assembly_source || that_present_assembly_source) {
      if (!(this_present_assembly_source && that_present_assembly_source))
        return false;
      if (!this.assembly_source.equals(that.assembly_source))
        return false;
    }

    boolean this_present_assembly_source_id = true && this.isSetAssembly_source_id();
    boolean that_present_assembly_source_id = true && that.isSetAssembly_source_id();
    if (this_present_assembly_source_id || that_present_assembly_source_id) {
      if (!(this_present_assembly_source_id && that_present_assembly_source_id))
        return false;
      if (!this.assembly_source_id.equals(that.assembly_source_id))
        return false;
    }

    boolean this_present_assembly_source_date = true && this.isSetAssembly_source_date();
    boolean that_present_assembly_source_date = true && that.isSetAssembly_source_date();
    if (this_present_assembly_source_date || that_present_assembly_source_date) {
      if (!(this_present_assembly_source_date && that_present_assembly_source_date))
        return false;
      if (!this.assembly_source_date.equals(that.assembly_source_date))
        return false;
    }

    boolean this_present_gc_content = true;
    boolean that_present_gc_content = true;
    if (this_present_gc_content || that_present_gc_content) {
      if (!(this_present_gc_content && that_present_gc_content))
        return false;
      if (this.gc_content != that.gc_content)
        return false;
    }

    boolean this_present_dna_size = true;
    boolean that_present_dna_size = true;
    if (this_present_dna_size || that_present_dna_size) {
      if (!(this_present_dna_size && that_present_dna_size))
        return false;
      if (this.dna_size != that.dna_size)
        return false;
    }

    boolean this_present_num_contigs = true;
    boolean that_present_num_contigs = true;
    if (this_present_num_contigs || that_present_num_contigs) {
      if (!(this_present_num_contigs && that_present_num_contigs))
        return false;
      if (this.num_contigs != that.num_contigs)
        return false;
    }

    boolean this_present_contig_ids = true && this.isSetContig_ids();
    boolean that_present_contig_ids = true && that.isSetContig_ids();
    if (this_present_contig_ids || that_present_contig_ids) {
      if (!(this_present_contig_ids && that_present_contig_ids))
        return false;
      if (!this.contig_ids.equals(that.contig_ids))
        return false;
    }

    boolean this_present_external_source = true && this.isSetExternal_source();
    boolean that_present_external_source = true && that.isSetExternal_source();
    if (this_present_external_source || that_present_external_source) {
      if (!(this_present_external_source && that_present_external_source))
        return false;
      if (!this.external_source.equals(that.external_source))
        return false;
    }

    boolean this_present_external_source_date = true && this.isSetExternal_source_date();
    boolean that_present_external_source_date = true && that.isSetExternal_source_date();
    if (this_present_external_source_date || that_present_external_source_date) {
      if (!(this_present_external_source_date && that_present_external_source_date))
        return false;
      if (!this.external_source_date.equals(that.external_source_date))
        return false;
    }

    boolean this_present_release = true && this.isSetRelease();
    boolean that_present_release = true && that.isSetRelease();
    if (this_present_release || that_present_release) {
      if (!(this_present_release && that_present_release))
        return false;
      if (!this.release.equals(that.release))
        return false;
    }

    boolean this_present_original_source_filename = true && this.isSetOriginal_source_filename();
    boolean that_present_original_source_filename = true && that.isSetOriginal_source_filename();
    if (this_present_original_source_filename || that_present_original_source_filename) {
      if (!(this_present_original_source_filename && that_present_original_source_filename))
        return false;
      if (!this.original_source_filename.equals(that.original_source_filename))
        return false;
    }

    boolean this_present_feature_type_counts = true && this.isSetFeature_type_counts();
    boolean that_present_feature_type_counts = true && that.isSetFeature_type_counts();
    if (this_present_feature_type_counts || that_present_feature_type_counts) {
      if (!(this_present_feature_type_counts && that_present_feature_type_counts))
        return false;
      if (!this.feature_type_counts.equals(that.feature_type_counts))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_scientific_name = true && (isSetScientific_name());
    list.add(present_scientific_name);
    if (present_scientific_name)
      list.add(scientific_name);

    boolean present_taxonomy_id = true;
    list.add(present_taxonomy_id);
    if (present_taxonomy_id)
      list.add(taxonomy_id);

    boolean present_kingdom = true && (isSetKingdom());
    list.add(present_kingdom);
    if (present_kingdom)
      list.add(kingdom);

    boolean present_scientific_lineage = true && (isSetScientific_lineage());
    list.add(present_scientific_lineage);
    if (present_scientific_lineage)
      list.add(scientific_lineage);

    boolean present_genetic_code = true;
    list.add(present_genetic_code);
    if (present_genetic_code)
      list.add(genetic_code);

    boolean present_organism_aliases = true && (isSetOrganism_aliases());
    list.add(present_organism_aliases);
    if (present_organism_aliases)
      list.add(organism_aliases);

    boolean present_assembly_source = true && (isSetAssembly_source());
    list.add(present_assembly_source);
    if (present_assembly_source)
      list.add(assembly_source);

    boolean present_assembly_source_id = true && (isSetAssembly_source_id());
    list.add(present_assembly_source_id);
    if (present_assembly_source_id)
      list.add(assembly_source_id);

    boolean present_assembly_source_date = true && (isSetAssembly_source_date());
    list.add(present_assembly_source_date);
    if (present_assembly_source_date)
      list.add(assembly_source_date);

    boolean present_gc_content = true;
    list.add(present_gc_content);
    if (present_gc_content)
      list.add(gc_content);

    boolean present_dna_size = true;
    list.add(present_dna_size);
    if (present_dna_size)
      list.add(dna_size);

    boolean present_num_contigs = true;
    list.add(present_num_contigs);
    if (present_num_contigs)
      list.add(num_contigs);

    boolean present_contig_ids = true && (isSetContig_ids());
    list.add(present_contig_ids);
    if (present_contig_ids)
      list.add(contig_ids);

    boolean present_external_source = true && (isSetExternal_source());
    list.add(present_external_source);
    if (present_external_source)
      list.add(external_source);

    boolean present_external_source_date = true && (isSetExternal_source_date());
    list.add(present_external_source_date);
    if (present_external_source_date)
      list.add(external_source_date);

    boolean present_release = true && (isSetRelease());
    list.add(present_release);
    if (present_release)
      list.add(release);

    boolean present_original_source_filename = true && (isSetOriginal_source_filename());
    list.add(present_original_source_filename);
    if (present_original_source_filename)
      list.add(original_source_filename);

    boolean present_feature_type_counts = true && (isSetFeature_type_counts());
    list.add(present_feature_type_counts);
    if (present_feature_type_counts)
      list.add(feature_type_counts);

    return list.hashCode();
  }

  @Override
  public int compareTo(Summary_data other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetScientific_name()).compareTo(other.isSetScientific_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetScientific_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.scientific_name, other.scientific_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTaxonomy_id()).compareTo(other.isSetTaxonomy_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTaxonomy_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.taxonomy_id, other.taxonomy_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetKingdom()).compareTo(other.isSetKingdom());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKingdom()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.kingdom, other.kingdom);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetScientific_lineage()).compareTo(other.isSetScientific_lineage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetScientific_lineage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.scientific_lineage, other.scientific_lineage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGenetic_code()).compareTo(other.isSetGenetic_code());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGenetic_code()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.genetic_code, other.genetic_code);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrganism_aliases()).compareTo(other.isSetOrganism_aliases());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrganism_aliases()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.organism_aliases, other.organism_aliases);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAssembly_source()).compareTo(other.isSetAssembly_source());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAssembly_source()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.assembly_source, other.assembly_source);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAssembly_source_id()).compareTo(other.isSetAssembly_source_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAssembly_source_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.assembly_source_id, other.assembly_source_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAssembly_source_date()).compareTo(other.isSetAssembly_source_date());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAssembly_source_date()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.assembly_source_date, other.assembly_source_date);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGc_content()).compareTo(other.isSetGc_content());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGc_content()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gc_content, other.gc_content);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDna_size()).compareTo(other.isSetDna_size());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDna_size()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dna_size, other.dna_size);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNum_contigs()).compareTo(other.isSetNum_contigs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNum_contigs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num_contigs, other.num_contigs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContig_ids()).compareTo(other.isSetContig_ids());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContig_ids()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contig_ids, other.contig_ids);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExternal_source()).compareTo(other.isSetExternal_source());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExternal_source()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.external_source, other.external_source);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExternal_source_date()).compareTo(other.isSetExternal_source_date());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExternal_source_date()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.external_source_date, other.external_source_date);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRelease()).compareTo(other.isSetRelease());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRelease()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.release, other.release);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOriginal_source_filename()).compareTo(other.isSetOriginal_source_filename());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOriginal_source_filename()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.original_source_filename, other.original_source_filename);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFeature_type_counts()).compareTo(other.isSetFeature_type_counts());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFeature_type_counts()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.feature_type_counts, other.feature_type_counts);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Summary_data(");
    boolean first = true;

    sb.append("scientific_name:");
    if (this.scientific_name == null) {
      sb.append("null");
    } else {
      sb.append(this.scientific_name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("taxonomy_id:");
    sb.append(this.taxonomy_id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("kingdom:");
    if (this.kingdom == null) {
      sb.append("null");
    } else {
      sb.append(this.kingdom);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("scientific_lineage:");
    if (this.scientific_lineage == null) {
      sb.append("null");
    } else {
      sb.append(this.scientific_lineage);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("genetic_code:");
    sb.append(this.genetic_code);
    first = false;
    if (!first) sb.append(", ");
    sb.append("organism_aliases:");
    if (this.organism_aliases == null) {
      sb.append("null");
    } else {
      sb.append(this.organism_aliases);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("assembly_source:");
    if (this.assembly_source == null) {
      sb.append("null");
    } else {
      sb.append(this.assembly_source);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("assembly_source_id:");
    if (this.assembly_source_id == null) {
      sb.append("null");
    } else {
      sb.append(this.assembly_source_id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("assembly_source_date:");
    if (this.assembly_source_date == null) {
      sb.append("null");
    } else {
      sb.append(this.assembly_source_date);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("gc_content:");
    sb.append(this.gc_content);
    first = false;
    if (!first) sb.append(", ");
    sb.append("dna_size:");
    sb.append(this.dna_size);
    first = false;
    if (!first) sb.append(", ");
    sb.append("num_contigs:");
    sb.append(this.num_contigs);
    first = false;
    if (!first) sb.append(", ");
    sb.append("contig_ids:");
    if (this.contig_ids == null) {
      sb.append("null");
    } else {
      sb.append(this.contig_ids);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("external_source:");
    if (this.external_source == null) {
      sb.append("null");
    } else {
      sb.append(this.external_source);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("external_source_date:");
    if (this.external_source_date == null) {
      sb.append("null");
    } else {
      sb.append(this.external_source_date);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("release:");
    if (this.release == null) {
      sb.append("null");
    } else {
      sb.append(this.release);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("original_source_filename:");
    if (this.original_source_filename == null) {
      sb.append("null");
    } else {
      sb.append(this.original_source_filename);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("feature_type_counts:");
    if (this.feature_type_counts == null) {
      sb.append("null");
    } else {
      sb.append(this.feature_type_counts);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class Summary_dataStandardSchemeFactory implements SchemeFactory {
    public Summary_dataStandardScheme getScheme() {
      return new Summary_dataStandardScheme();
    }
  }

  private static class Summary_dataStandardScheme extends StandardScheme<Summary_data> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Summary_data struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SCIENTIFIC_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.scientific_name = iprot.readString();
              struct.setScientific_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TAXONOMY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.taxonomy_id = iprot.readI64();
              struct.setTaxonomy_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // KINGDOM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.kingdom = iprot.readString();
              struct.setKingdomIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SCIENTIFIC_LINEAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list216 = iprot.readListBegin();
                struct.scientific_lineage = new ArrayList<String>(_list216.size);
                String _elem217;
                for (int _i218 = 0; _i218 < _list216.size; ++_i218)
                {
                  _elem217 = iprot.readString();
                  struct.scientific_lineage.add(_elem217);
                }
                iprot.readListEnd();
              }
              struct.setScientific_lineageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // GENETIC_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.genetic_code = iprot.readByte();
              struct.setGenetic_codeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // ORGANISM_ALIASES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list219 = iprot.readListBegin();
                struct.organism_aliases = new ArrayList<String>(_list219.size);
                String _elem220;
                for (int _i221 = 0; _i221 < _list219.size; ++_i221)
                {
                  _elem220 = iprot.readString();
                  struct.organism_aliases.add(_elem220);
                }
                iprot.readListEnd();
              }
              struct.setOrganism_aliasesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // ASSEMBLY_SOURCE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.assembly_source = iprot.readString();
              struct.setAssembly_sourceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // ASSEMBLY_SOURCE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.assembly_source_id = iprot.readString();
              struct.setAssembly_source_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // ASSEMBLY_SOURCE_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.assembly_source_date = iprot.readString();
              struct.setAssembly_source_dateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // GC_CONTENT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.gc_content = iprot.readDouble();
              struct.setGc_contentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // DNA_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.dna_size = iprot.readI64();
              struct.setDna_sizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // NUM_CONTIGS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.num_contigs = iprot.readI64();
              struct.setNum_contigsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // CONTIG_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list222 = iprot.readListBegin();
                struct.contig_ids = new ArrayList<String>(_list222.size);
                String _elem223;
                for (int _i224 = 0; _i224 < _list222.size; ++_i224)
                {
                  _elem223 = iprot.readString();
                  struct.contig_ids.add(_elem223);
                }
                iprot.readListEnd();
              }
              struct.setContig_idsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // EXTERNAL_SOURCE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.external_source = iprot.readString();
              struct.setExternal_sourceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // EXTERNAL_SOURCE_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.external_source_date = iprot.readString();
              struct.setExternal_source_dateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // RELEASE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.release = iprot.readString();
              struct.setReleaseIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // ORIGINAL_SOURCE_FILENAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.original_source_filename = iprot.readString();
              struct.setOriginal_source_filenameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // FEATURE_TYPE_COUNTS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map225 = iprot.readMapBegin();
                struct.feature_type_counts = new TreeMap<String,Long>();
                String _key226;
                long _val227;
                for (int _i228 = 0; _i228 < _map225.size; ++_i228)
                {
                  _key226 = iprot.readString();
                  _val227 = iprot.readI64();
                  struct.feature_type_counts.put(_key226, _val227);
                }
                iprot.readMapEnd();
              }
              struct.setFeature_type_countsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Summary_data struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.scientific_name != null) {
        oprot.writeFieldBegin(SCIENTIFIC_NAME_FIELD_DESC);
        oprot.writeString(struct.scientific_name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TAXONOMY_ID_FIELD_DESC);
      oprot.writeI64(struct.taxonomy_id);
      oprot.writeFieldEnd();
      if (struct.kingdom != null) {
        oprot.writeFieldBegin(KINGDOM_FIELD_DESC);
        oprot.writeString(struct.kingdom);
        oprot.writeFieldEnd();
      }
      if (struct.scientific_lineage != null) {
        oprot.writeFieldBegin(SCIENTIFIC_LINEAGE_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.scientific_lineage.size()));
          for (String _iter229 : struct.scientific_lineage)
          {
            oprot.writeString(_iter229);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(GENETIC_CODE_FIELD_DESC);
      oprot.writeByte(struct.genetic_code);
      oprot.writeFieldEnd();
      if (struct.organism_aliases != null) {
        oprot.writeFieldBegin(ORGANISM_ALIASES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.organism_aliases.size()));
          for (String _iter230 : struct.organism_aliases)
          {
            oprot.writeString(_iter230);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.assembly_source != null) {
        oprot.writeFieldBegin(ASSEMBLY_SOURCE_FIELD_DESC);
        oprot.writeString(struct.assembly_source);
        oprot.writeFieldEnd();
      }
      if (struct.assembly_source_id != null) {
        oprot.writeFieldBegin(ASSEMBLY_SOURCE_ID_FIELD_DESC);
        oprot.writeString(struct.assembly_source_id);
        oprot.writeFieldEnd();
      }
      if (struct.assembly_source_date != null) {
        oprot.writeFieldBegin(ASSEMBLY_SOURCE_DATE_FIELD_DESC);
        oprot.writeString(struct.assembly_source_date);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(GC_CONTENT_FIELD_DESC);
      oprot.writeDouble(struct.gc_content);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DNA_SIZE_FIELD_DESC);
      oprot.writeI64(struct.dna_size);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NUM_CONTIGS_FIELD_DESC);
      oprot.writeI64(struct.num_contigs);
      oprot.writeFieldEnd();
      if (struct.contig_ids != null) {
        oprot.writeFieldBegin(CONTIG_IDS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.contig_ids.size()));
          for (String _iter231 : struct.contig_ids)
          {
            oprot.writeString(_iter231);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.external_source != null) {
        oprot.writeFieldBegin(EXTERNAL_SOURCE_FIELD_DESC);
        oprot.writeString(struct.external_source);
        oprot.writeFieldEnd();
      }
      if (struct.external_source_date != null) {
        oprot.writeFieldBegin(EXTERNAL_SOURCE_DATE_FIELD_DESC);
        oprot.writeString(struct.external_source_date);
        oprot.writeFieldEnd();
      }
      if (struct.release != null) {
        oprot.writeFieldBegin(RELEASE_FIELD_DESC);
        oprot.writeString(struct.release);
        oprot.writeFieldEnd();
      }
      if (struct.original_source_filename != null) {
        oprot.writeFieldBegin(ORIGINAL_SOURCE_FILENAME_FIELD_DESC);
        oprot.writeString(struct.original_source_filename);
        oprot.writeFieldEnd();
      }
      if (struct.feature_type_counts != null) {
        oprot.writeFieldBegin(FEATURE_TYPE_COUNTS_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I64, struct.feature_type_counts.size()));
          for (Map.Entry<String, Long> _iter232 : struct.feature_type_counts.entrySet())
          {
            oprot.writeString(_iter232.getKey());
            oprot.writeI64(_iter232.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class Summary_dataTupleSchemeFactory implements SchemeFactory {
    public Summary_dataTupleScheme getScheme() {
      return new Summary_dataTupleScheme();
    }
  }

  private static class Summary_dataTupleScheme extends TupleScheme<Summary_data> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Summary_data struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetScientific_name()) {
        optionals.set(0);
      }
      if (struct.isSetTaxonomy_id()) {
        optionals.set(1);
      }
      if (struct.isSetKingdom()) {
        optionals.set(2);
      }
      if (struct.isSetScientific_lineage()) {
        optionals.set(3);
      }
      if (struct.isSetGenetic_code()) {
        optionals.set(4);
      }
      if (struct.isSetOrganism_aliases()) {
        optionals.set(5);
      }
      if (struct.isSetAssembly_source()) {
        optionals.set(6);
      }
      if (struct.isSetAssembly_source_id()) {
        optionals.set(7);
      }
      if (struct.isSetAssembly_source_date()) {
        optionals.set(8);
      }
      if (struct.isSetGc_content()) {
        optionals.set(9);
      }
      if (struct.isSetDna_size()) {
        optionals.set(10);
      }
      if (struct.isSetNum_contigs()) {
        optionals.set(11);
      }
      if (struct.isSetContig_ids()) {
        optionals.set(12);
      }
      if (struct.isSetExternal_source()) {
        optionals.set(13);
      }
      if (struct.isSetExternal_source_date()) {
        optionals.set(14);
      }
      if (struct.isSetRelease()) {
        optionals.set(15);
      }
      if (struct.isSetOriginal_source_filename()) {
        optionals.set(16);
      }
      if (struct.isSetFeature_type_counts()) {
        optionals.set(17);
      }
      oprot.writeBitSet(optionals, 18);
      if (struct.isSetScientific_name()) {
        oprot.writeString(struct.scientific_name);
      }
      if (struct.isSetTaxonomy_id()) {
        oprot.writeI64(struct.taxonomy_id);
      }
      if (struct.isSetKingdom()) {
        oprot.writeString(struct.kingdom);
      }
      if (struct.isSetScientific_lineage()) {
        {
          oprot.writeI32(struct.scientific_lineage.size());
          for (String _iter233 : struct.scientific_lineage)
          {
            oprot.writeString(_iter233);
          }
        }
      }
      if (struct.isSetGenetic_code()) {
        oprot.writeByte(struct.genetic_code);
      }
      if (struct.isSetOrganism_aliases()) {
        {
          oprot.writeI32(struct.organism_aliases.size());
          for (String _iter234 : struct.organism_aliases)
          {
            oprot.writeString(_iter234);
          }
        }
      }
      if (struct.isSetAssembly_source()) {
        oprot.writeString(struct.assembly_source);
      }
      if (struct.isSetAssembly_source_id()) {
        oprot.writeString(struct.assembly_source_id);
      }
      if (struct.isSetAssembly_source_date()) {
        oprot.writeString(struct.assembly_source_date);
      }
      if (struct.isSetGc_content()) {
        oprot.writeDouble(struct.gc_content);
      }
      if (struct.isSetDna_size()) {
        oprot.writeI64(struct.dna_size);
      }
      if (struct.isSetNum_contigs()) {
        oprot.writeI64(struct.num_contigs);
      }
      if (struct.isSetContig_ids()) {
        {
          oprot.writeI32(struct.contig_ids.size());
          for (String _iter235 : struct.contig_ids)
          {
            oprot.writeString(_iter235);
          }
        }
      }
      if (struct.isSetExternal_source()) {
        oprot.writeString(struct.external_source);
      }
      if (struct.isSetExternal_source_date()) {
        oprot.writeString(struct.external_source_date);
      }
      if (struct.isSetRelease()) {
        oprot.writeString(struct.release);
      }
      if (struct.isSetOriginal_source_filename()) {
        oprot.writeString(struct.original_source_filename);
      }
      if (struct.isSetFeature_type_counts()) {
        {
          oprot.writeI32(struct.feature_type_counts.size());
          for (Map.Entry<String, Long> _iter236 : struct.feature_type_counts.entrySet())
          {
            oprot.writeString(_iter236.getKey());
            oprot.writeI64(_iter236.getValue());
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Summary_data struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(18);
      if (incoming.get(0)) {
        struct.scientific_name = iprot.readString();
        struct.setScientific_nameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.taxonomy_id = iprot.readI64();
        struct.setTaxonomy_idIsSet(true);
      }
      if (incoming.get(2)) {
        struct.kingdom = iprot.readString();
        struct.setKingdomIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list237 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.scientific_lineage = new ArrayList<String>(_list237.size);
          String _elem238;
          for (int _i239 = 0; _i239 < _list237.size; ++_i239)
          {
            _elem238 = iprot.readString();
            struct.scientific_lineage.add(_elem238);
          }
        }
        struct.setScientific_lineageIsSet(true);
      }
      if (incoming.get(4)) {
        struct.genetic_code = iprot.readByte();
        struct.setGenetic_codeIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list240 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.organism_aliases = new ArrayList<String>(_list240.size);
          String _elem241;
          for (int _i242 = 0; _i242 < _list240.size; ++_i242)
          {
            _elem241 = iprot.readString();
            struct.organism_aliases.add(_elem241);
          }
        }
        struct.setOrganism_aliasesIsSet(true);
      }
      if (incoming.get(6)) {
        struct.assembly_source = iprot.readString();
        struct.setAssembly_sourceIsSet(true);
      }
      if (incoming.get(7)) {
        struct.assembly_source_id = iprot.readString();
        struct.setAssembly_source_idIsSet(true);
      }
      if (incoming.get(8)) {
        struct.assembly_source_date = iprot.readString();
        struct.setAssembly_source_dateIsSet(true);
      }
      if (incoming.get(9)) {
        struct.gc_content = iprot.readDouble();
        struct.setGc_contentIsSet(true);
      }
      if (incoming.get(10)) {
        struct.dna_size = iprot.readI64();
        struct.setDna_sizeIsSet(true);
      }
      if (incoming.get(11)) {
        struct.num_contigs = iprot.readI64();
        struct.setNum_contigsIsSet(true);
      }
      if (incoming.get(12)) {
        {
          org.apache.thrift.protocol.TList _list243 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.contig_ids = new ArrayList<String>(_list243.size);
          String _elem244;
          for (int _i245 = 0; _i245 < _list243.size; ++_i245)
          {
            _elem244 = iprot.readString();
            struct.contig_ids.add(_elem244);
          }
        }
        struct.setContig_idsIsSet(true);
      }
      if (incoming.get(13)) {
        struct.external_source = iprot.readString();
        struct.setExternal_sourceIsSet(true);
      }
      if (incoming.get(14)) {
        struct.external_source_date = iprot.readString();
        struct.setExternal_source_dateIsSet(true);
      }
      if (incoming.get(15)) {
        struct.release = iprot.readString();
        struct.setReleaseIsSet(true);
      }
      if (incoming.get(16)) {
        struct.original_source_filename = iprot.readString();
        struct.setOriginal_source_filenameIsSet(true);
      }
      if (incoming.get(17)) {
        {
          org.apache.thrift.protocol.TMap _map246 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I64, iprot.readI32());
          struct.feature_type_counts = new TreeMap<String,Long>();
          String _key247;
          long _val248;
          for (int _i249 = 0; _i249 < _map246.size; ++_i249)
          {
            _key247 = iprot.readString();
            _val248 = iprot.readI64();
            struct.feature_type_counts.put(_key247, _val248);
          }
        }
        struct.setFeature_type_countsIsSet(true);
      }
    }
  }

}

